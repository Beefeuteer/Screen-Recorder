{"version":3,"sources":["App.js","index.js"],"names":["mediaRecorder","dataChunks","App","username","useRef","Date","now","toString","slice","socketRef","io","videoRef","linkRef","useState","screenStream","setScreenStream","voiceStream","setVoiceStream","recording","setRecording","loading","setLoading","stopRecording","current","emit","videoBlob","Blob","type","videoSrc","URL","createObjectURL","src","href","download","useEffect","a","navigator","mediaDevices","getDisplayMedia","audio","video","_screenStream","console","error","warn","getUserMedia","_voiceStream","width","color","controls","ref","onClick","stop","removeAttribute","MediaRecorder","ondataavailable","data","push","onstop","start","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAOIA,EAAgB,KAChBC,EAAa,GAkIFC,MAhIf,WACE,IAAMC,EAAWC,iBAAO,QAAD,OAASC,KAAKC,MAAMC,WAAWC,OAAO,KACvDC,EAAYL,iBAAOM,YAPR,0BAQXC,EAAWP,mBACXQ,EAAUR,mBAEhB,EAAwCS,qBAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KA0EA,SAASC,IACPH,GAAa,GAEbV,EAAUc,QAAQC,KAAK,iBAAkBrB,EAASoB,SAIlD,IAAME,EAAY,IAAIC,KAAKzB,EAAY,CACrC0B,KAAM,cAGFC,EAAWC,IAAIC,gBAAgBL,GAErCd,EAASY,QAAQQ,IAAMH,EACvBhB,EAAQW,QAAQS,KAAOJ,EACvBhB,EAAQW,QAAQU,SAAhB,UAA8B5B,KAAKC,MAAnC,YAA4CH,EAASoB,QAArD,QAEAvB,EAAgB,KAChBC,EAAa,GAaf,OAvGAiC,qBAAU,WACRzB,EAAUc,QAAQC,KAAK,eAAgBrB,EAASoB,WAC/C,IAEHW,qBAAU,WACP,sBAAC,4BAAAC,EAAA,0DACIC,UAAUC,aAAaC,gBAAgB,CAACC,OAAO,EAAMC,OAAO,IADhE,0CAGgCJ,UAAUC,aAAaC,gBAAgB,CAACC,OAAO,EAAMC,OAAO,IAH5F,OAGUC,EAHV,OAII1B,EAAgB0B,GAJpB,gDAMIC,QAAQC,MAAM,sBAAd,MACAtB,GAAW,GAPf,gCAUEqB,QAAQE,KAAK,qCACbvB,GAAW,GAXb,wDAAD,KAcA,IAIHa,qBAAU,WACP,sBAAC,4BAAAC,EAAA,0DACIC,UAAUC,aAAaQ,aAD3B,qBAEM/B,EAFN,0CAIiCsB,UAAUC,aAAaQ,aAAa,CAC7DN,OAAO,IALf,OAIYO,EAJZ,OAOM7B,EAAe6B,GAPrB,gDASMJ,QAAQC,MAAM,mBAAd,MACA1B,EAAe,eAVrB,yBAYMI,GAAW,GAZjB,6CAgBEqB,QAAQE,KAAK,kCACbvB,GAAW,GAjBb,8DAAD,KAoBA,CAACP,IA2DAM,EAAgB,cAAC,IAAD,CAAQO,KAAK,OAAOoB,MAAM,KAAKC,MAAM,YAGvD,qCACE,kDACA,uBAAOC,UAAQ,EAACC,IAAKvC,IACrB,mBAAGuC,IAAKtC,EAAR,sBACA,wBAAQuC,QAjBI,WACTjC,EAGClB,GACFA,EAAcoD,OAnDdtC,GAAgBE,IAAgBhB,IAClCmB,GAAa,GAEbR,EAASY,QAAQ8B,gBAAgB,OACjCzC,EAAQW,QAAQ8B,gBAAgB,QAChCzC,EAAQW,QAAQ8B,gBAAgB,aAOhCrD,EAAgB,IAAIsD,cAJNxC,IAKAyC,gBAAkB,YAAe,IAAZC,EAAW,EAAXA,KACjCvD,EAAWwD,KAAKD,GAChB/C,EAAUc,QAAQC,KAAK,mBAAoB,CACzCrB,SAAUA,EAASoB,QACnBiC,UAGJxD,EAAc0D,OAASpC,EACvBtB,EAAc2D,MAAM,MA0CMC,UAAW5C,EAArC,SACIE,EAAsB,OAAV,cChItB2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1df883c9.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\nimport Loader from 'react-loader-spinner'\r\nimport { io } from 'socket.io-client'\r\nimport './App.scss'\r\n\r\nconst SERVER_URI = 'http://localhost:3000'\r\n\r\nlet mediaRecorder = null\r\nlet dataChunks = []\r\n\r\nfunction App() {\r\n  const username = useRef(`User_${Date.now().toString().slice(-4)}`)\r\n  const socketRef = useRef(io(SERVER_URI))\r\n  const videoRef = useRef()\r\n  const linkRef = useRef()\r\n\r\n  const [screenStream, setScreenStream] = useState()\r\n  const [voiceStream, setVoiceStream] = useState()\r\n  const [recording, setRecording] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    socketRef.current.emit('user:connect', username.current)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      if (navigator.mediaDevices.getDisplayMedia({audio: true, video: true})) {\r\n        try {\r\n          const _screenStream = await navigator.mediaDevices.getDisplayMedia({audio: true, video: true})\r\n          setScreenStream(_screenStream)\r\n        } catch (e) {\r\n          console.error('*** getDisplayMedia', e)\r\n          setLoading(false)\r\n        }\r\n      } else {\r\n        console.warn('*** getDisplayMedia not supported')\r\n        setLoading(false)\r\n      }\r\n    })()\r\n  }, [])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      if (navigator.mediaDevices.getUserMedia) {\r\n        if (screenStream) {\r\n          try {\r\n            const _voiceStream = await navigator.mediaDevices.getUserMedia({\r\n              audio: false\r\n            })\r\n            setVoiceStream(_voiceStream)\r\n          } catch (e) {\r\n            console.error('*** getUserMedia', e)\r\n            setVoiceStream('unavailable')\r\n          } finally {\r\n            setLoading(false)\r\n          }\r\n        }\r\n      } else {\r\n        console.warn('*** getUserMedia not supported')\r\n        setLoading(false)\r\n      }\r\n    })()\r\n  }, [screenStream])\r\n\r\n  function startRecording() {\r\n    if (screenStream && voiceStream && !mediaRecorder) {\r\n      setRecording(true)\r\n\r\n      videoRef.current.removeAttribute('src')\r\n      linkRef.current.removeAttribute('href')\r\n      linkRef.current.removeAttribute('download')\r\n\r\n      let mediaStream\r\n      mediaStream = screenStream\r\n       \r\n      \r\n\r\n      mediaRecorder = new MediaRecorder(mediaStream)\r\n      mediaRecorder.ondataavailable = ({ data }) => {\r\n        dataChunks.push(data)\r\n        socketRef.current.emit('screenData:start', {\r\n          username: username.current,\r\n          data\r\n        })\r\n      }\r\n      mediaRecorder.onstop = stopRecording\r\n      mediaRecorder.start(50)\r\n    }\r\n  }\r\n\r\n  function stopRecording() {\r\n    setRecording(false)\r\n\r\n    socketRef.current.emit('screenData:end', username.current)\r\n\r\n\r\n\r\n    const videoBlob = new Blob(dataChunks, {\r\n      type: 'video/mp4'\r\n    })\r\n\r\n    const videoSrc = URL.createObjectURL(videoBlob)\r\n\r\n    videoRef.current.src = videoSrc\r\n    linkRef.current.href = videoSrc\r\n    linkRef.current.download = `${Date.now()}-${username.current}.mp4`\r\n\r\n    mediaRecorder = null\r\n    dataChunks = []\r\n  }\r\n\r\n  const onClick = () => {\r\n    if (!recording) {\r\n      startRecording()\r\n    } else {\r\n      if (mediaRecorder) {\r\n        mediaRecorder.stop()\r\n      }\r\n    }\r\n  }\r\n\r\n  if (loading) return <Loader type='Oval' width='60' color='#0275d8' />\r\n\r\n  return (\r\n    <>\r\n      <h1>Screen Recording</h1>\r\n      <video controls ref={videoRef}></video>\r\n      <a ref={linkRef}>Download</a>\r\n      <button onClick={onClick} disabled={!voiceStream}>\r\n        {!recording ? 'Start' : 'Stop'}\r\n      </button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}