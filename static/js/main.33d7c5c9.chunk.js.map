{"version":3,"sources":["App.js","index.js"],"names":["mediaRecorder","dataChunks","App","username","useRef","Date","now","toString","slice","socketRef","io","videoRef","linkRef","useState","screenStream","setScreenStream","voiceStream","setVoiceStream","recording","setRecording","loading","setLoading","stopRecording","current","emit","videoBlob","Blob","type","videoSrc","URL","createObjectURL","src","href","download","useEffect","a","navigator","mediaDevices","getDisplayMedia","video","_screenStream","console","error","warn","getUserMedia","audio","_voiceStream","width","color","controls","ref","onClick","stop","mediaStream","removeAttribute","MediaStream","getVideoTracks","getAudioTracks","MediaRecorder","ondataavailable","data","push","onstop","start","startRecording","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAOIA,EAAgB,KAChBC,EAAa,GA0IFC,MAxIf,WACE,IAAMC,EAAWC,iBAAO,QAAD,OAASC,KAAKC,MAAMC,WAAWC,OAAO,KACvDC,EAAYL,iBAAOM,YAPR,0BAQXC,EAAWP,mBACXQ,EAAUR,mBAEhB,EAAwCS,qBAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAoFA,SAASC,IACPH,GAAa,GAEbV,EAAUc,QAAQC,KAAK,iBAAkBrB,EAASoB,SAElD,IAAME,EAAY,IAAIC,KAAKzB,EAAY,CACrC0B,KAAM,eAGFC,EAAWC,IAAIC,gBAAgBL,GAErCd,EAASY,QAAQQ,IAAMH,EACvBhB,EAAQW,QAAQS,KAAOJ,EACvBhB,EAAQW,QAAQU,SAAhB,UAA8B5B,KAAKC,MAAnC,YAA4CH,EAASoB,QAArD,SAEAvB,EAAgB,KAChBC,EAAa,GAaf,OA/GAiC,qBAAU,WACRzB,EAAUc,QAAQC,KAAK,eAAgBrB,EAASoB,WAC/C,IAEHW,qBAAU,WACP,sBAAC,4BAAAC,EAAA,0DACIC,UAAUC,aAAaC,gBAD3B,0CAGgCF,UAAUC,aAAaC,gBAAgB,CACjEC,OAAO,IAJb,OAGUC,EAHV,OAMIzB,EAAgByB,GANpB,gDAQIC,QAAQC,MAAM,sBAAd,MACArB,GAAW,GATf,gCAYEoB,QAAQE,KAAK,qCACbtB,GAAW,GAbb,wDAAD,KAgBA,IAEHa,qBAAU,WACP,sBAAC,4BAAAC,EAAA,0DACIC,UAAUC,aAAaO,aAD3B,qBAEM9B,EAFN,0CAIiCsB,UAAUC,aAAaO,aAAa,CAC7DC,OAAO,IALf,OAIYC,EAJZ,OAOM7B,EAAe6B,GAPrB,gDASML,QAAQC,MAAM,mBAAd,MACAzB,EAAe,eAVrB,yBAYMI,GAAW,GAZjB,6CAgBEoB,QAAQE,KAAK,kCACbtB,GAAW,GAjBb,8DAAD,KAoBA,CAACP,IAmEAM,EAAgB,cAAC,IAAD,CAAQO,KAAK,OAAOoB,MAAM,KAAKC,MAAM,YAGvD,qCACE,kDACA,uBAAOC,UAAQ,EAACC,IAAKvC,IACrB,mBAAGuC,IAAKtC,EAAR,sBACA,wBAAQuC,QAjBI,WACTjC,EAGClB,GACFA,EAAcoD,OA5DpB,WAQI,IAAIC,EAPFvC,GAAgBE,IAAgBhB,IAClCmB,GAAa,GAEbR,EAASY,QAAQ+B,gBAAgB,OACjC1C,EAAQW,QAAQ+B,gBAAgB,QAChC1C,EAAQW,QAAQ+B,gBAAgB,YAI9BD,EADkB,gBAAhBrC,EACYF,EAOA,IAAIyC,YAAJ,sBACTzC,EAAa0C,kBADJ,YAETxC,EAAYyC,qBAInBzD,EAAgB,IAAI0D,cAAcL,IACpBM,gBAAkB,YAAe,IAAZC,EAAW,EAAXA,KACjC3D,EAAW4D,KAAKD,GAChBnD,EAAUc,QAAQC,KAAK,mBAAoB,CACzCrB,SAAUA,EAASoB,QACnBqC,UAGJ5D,EAAc8D,OAASxC,EACvBtB,EAAc+D,MAAM,MAyBpBC,IAe0BC,UAAWjD,EAArC,SACIE,EAAsB,OAAV,cCxItBgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.33d7c5c9.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport Loader from 'react-loader-spinner'\nimport { io } from 'socket.io-client'\nimport './App.scss'\n\nconst SERVER_URI = 'http://localhost:4000'\n\nlet mediaRecorder = null\nlet dataChunks = []\n\nfunction App() {\n  const username = useRef(`User_${Date.now().toString().slice(-4)}`)\n  const socketRef = useRef(io(SERVER_URI))\n  const videoRef = useRef()\n  const linkRef = useRef()\n\n  const [screenStream, setScreenStream] = useState()\n  const [voiceStream, setVoiceStream] = useState()\n  const [recording, setRecording] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    socketRef.current.emit('user:connect', username.current)\n  }, [])\n\n  useEffect(() => {\n    ;(async () => {\n      if (navigator.mediaDevices.getDisplayMedia) {\n        try {\n          const _screenStream = await navigator.mediaDevices.getDisplayMedia({\n            video: true\n          })\n          setScreenStream(_screenStream)\n        } catch (e) {\n          console.error('*** getDisplayMedia', e)\n          setLoading(false)\n        }\n      } else {\n        console.warn('*** getDisplayMedia not supported')\n        setLoading(false)\n      }\n    })()\n  }, [])\n\n  useEffect(() => {\n    ;(async () => {\n      if (navigator.mediaDevices.getUserMedia) {\n        if (screenStream) {\n          try {\n            const _voiceStream = await navigator.mediaDevices.getUserMedia({\n              audio: true\n            })\n            setVoiceStream(_voiceStream)\n          } catch (e) {\n            console.error('*** getUserMedia', e)\n            setVoiceStream('unavailable')\n          } finally {\n            setLoading(false)\n          }\n        }\n      } else {\n        console.warn('*** getUserMedia not supported')\n        setLoading(false)\n      }\n    })()\n  }, [screenStream])\n\n  function startRecording() {\n    if (screenStream && voiceStream && !mediaRecorder) {\n      setRecording(true)\n\n      videoRef.current.removeAttribute('src')\n      linkRef.current.removeAttribute('href')\n      linkRef.current.removeAttribute('download')\n\n      let mediaStream\n      if (voiceStream === 'unavailable') {\n        mediaStream = screenStream\n      } else {\n        // const audioTracks = voiceStream.getAudioTracks()\n        // audioTracks.forEach(track => {\n        //   screenStream.addTrack(track)\n        // })\n        // mediaStream = screenStream\n        mediaStream = new MediaStream([\n          ...screenStream.getVideoTracks(),\n          ...voiceStream.getAudioTracks()\n        ])\n      }\n\n      mediaRecorder = new MediaRecorder(mediaStream)\n      mediaRecorder.ondataavailable = ({ data }) => {\n        dataChunks.push(data)\n        socketRef.current.emit('screenData:start', {\n          username: username.current,\n          data\n        })\n      }\n      mediaRecorder.onstop = stopRecording\n      mediaRecorder.start(250)\n    }\n  }\n\n  function stopRecording() {\n    setRecording(false)\n\n    socketRef.current.emit('screenData:end', username.current)\n\n    const videoBlob = new Blob(dataChunks, {\n      type: 'video/webm'\n    })\n\n    const videoSrc = URL.createObjectURL(videoBlob)\n\n    videoRef.current.src = videoSrc\n    linkRef.current.href = videoSrc\n    linkRef.current.download = `${Date.now()}-${username.current}.webm`\n\n    mediaRecorder = null\n    dataChunks = []\n  }\n\n  const onClick = () => {\n    if (!recording) {\n      startRecording()\n    } else {\n      if (mediaRecorder) {\n        mediaRecorder.stop()\n      }\n    }\n  }\n\n  if (loading) return <Loader type='Oval' width='60' color='#0275d8' />\n\n  return (\n    <>\n      <h1>Screen Recording</h1>\n      <video controls ref={videoRef}></video>\n      <a ref={linkRef}>Download</a>\n      <button onClick={onClick} disabled={!voiceStream}>\n        {!recording ? 'Start' : 'Stop'}\n      </button>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}